// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: chough.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChoughService_GetStatus_FullMethodName        = "/chough.msg.ChoughService/GetStatus"
	ChoughService_FlushSoundStatus_FullMethodName = "/chough.msg.ChoughService/FlushSoundStatus"
	ChoughService_GetSoundStatus_FullMethodName   = "/chough.msg.ChoughService/GetSoundStatus"
	ChoughService_SetSoundStatus_FullMethodName   = "/chough.msg.ChoughService/SetSoundStatus"
	ChoughService_FlushHomeStatus_FullMethodName  = "/chough.msg.ChoughService/FlushHomeStatus"
	ChoughService_SetDoorState_FullMethodName     = "/chough.msg.ChoughService/SetDoorState"
)

// ChoughServiceClient is the client API for ChoughService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChoughServiceClient interface {
	GetStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusMessage, error)
	FlushSoundStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	GetSoundStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusMessage, error)
	SetSoundStatus(ctx context.Context, in *StatusMessage, opts ...grpc.CallOption) (*StatusMessage, error)
	FlushHomeStatus(ctx context.Context, in *House, opts ...grpc.CallOption) (*Empty, error)
	SetDoorState(ctx context.Context, in *DoorStatus, opts ...grpc.CallOption) (*ReturnMessage, error)
}

type choughServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChoughServiceClient(cc grpc.ClientConnInterface) ChoughServiceClient {
	return &choughServiceClient{cc}
}

func (c *choughServiceClient) GetStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusMessage)
	err := c.cc.Invoke(ctx, ChoughService_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *choughServiceClient) FlushSoundStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ChoughService_FlushSoundStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *choughServiceClient) GetSoundStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusMessage)
	err := c.cc.Invoke(ctx, ChoughService_GetSoundStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *choughServiceClient) SetSoundStatus(ctx context.Context, in *StatusMessage, opts ...grpc.CallOption) (*StatusMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusMessage)
	err := c.cc.Invoke(ctx, ChoughService_SetSoundStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *choughServiceClient) FlushHomeStatus(ctx context.Context, in *House, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ChoughService_FlushHomeStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *choughServiceClient) SetDoorState(ctx context.Context, in *DoorStatus, opts ...grpc.CallOption) (*ReturnMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReturnMessage)
	err := c.cc.Invoke(ctx, ChoughService_SetDoorState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChoughServiceServer is the server API for ChoughService service.
// All implementations must embed UnimplementedChoughServiceServer
// for forward compatibility.
type ChoughServiceServer interface {
	GetStatus(context.Context, *Empty) (*StatusMessage, error)
	FlushSoundStatus(context.Context, *Empty) (*Empty, error)
	GetSoundStatus(context.Context, *Empty) (*StatusMessage, error)
	SetSoundStatus(context.Context, *StatusMessage) (*StatusMessage, error)
	FlushHomeStatus(context.Context, *House) (*Empty, error)
	SetDoorState(context.Context, *DoorStatus) (*ReturnMessage, error)
	mustEmbedUnimplementedChoughServiceServer()
}

// UnimplementedChoughServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChoughServiceServer struct{}

func (UnimplementedChoughServiceServer) GetStatus(context.Context, *Empty) (*StatusMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedChoughServiceServer) FlushSoundStatus(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlushSoundStatus not implemented")
}
func (UnimplementedChoughServiceServer) GetSoundStatus(context.Context, *Empty) (*StatusMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSoundStatus not implemented")
}
func (UnimplementedChoughServiceServer) SetSoundStatus(context.Context, *StatusMessage) (*StatusMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSoundStatus not implemented")
}
func (UnimplementedChoughServiceServer) FlushHomeStatus(context.Context, *House) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlushHomeStatus not implemented")
}
func (UnimplementedChoughServiceServer) SetDoorState(context.Context, *DoorStatus) (*ReturnMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDoorState not implemented")
}
func (UnimplementedChoughServiceServer) mustEmbedUnimplementedChoughServiceServer() {}
func (UnimplementedChoughServiceServer) testEmbeddedByValue()                       {}

// UnsafeChoughServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChoughServiceServer will
// result in compilation errors.
type UnsafeChoughServiceServer interface {
	mustEmbedUnimplementedChoughServiceServer()
}

func RegisterChoughServiceServer(s grpc.ServiceRegistrar, srv ChoughServiceServer) {
	// If the following call pancis, it indicates UnimplementedChoughServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChoughService_ServiceDesc, srv)
}

func _ChoughService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChoughServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChoughService_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChoughServiceServer).GetStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChoughService_FlushSoundStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChoughServiceServer).FlushSoundStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChoughService_FlushSoundStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChoughServiceServer).FlushSoundStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChoughService_GetSoundStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChoughServiceServer).GetSoundStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChoughService_GetSoundStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChoughServiceServer).GetSoundStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChoughService_SetSoundStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChoughServiceServer).SetSoundStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChoughService_SetSoundStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChoughServiceServer).SetSoundStatus(ctx, req.(*StatusMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChoughService_FlushHomeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(House)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChoughServiceServer).FlushHomeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChoughService_FlushHomeStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChoughServiceServer).FlushHomeStatus(ctx, req.(*House))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChoughService_SetDoorState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoorStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChoughServiceServer).SetDoorState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChoughService_SetDoorState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChoughServiceServer).SetDoorState(ctx, req.(*DoorStatus))
	}
	return interceptor(ctx, in, info, handler)
}

// ChoughService_ServiceDesc is the grpc.ServiceDesc for ChoughService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChoughService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chough.msg.ChoughService",
	HandlerType: (*ChoughServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _ChoughService_GetStatus_Handler,
		},
		{
			MethodName: "FlushSoundStatus",
			Handler:    _ChoughService_FlushSoundStatus_Handler,
		},
		{
			MethodName: "GetSoundStatus",
			Handler:    _ChoughService_GetSoundStatus_Handler,
		},
		{
			MethodName: "SetSoundStatus",
			Handler:    _ChoughService_SetSoundStatus_Handler,
		},
		{
			MethodName: "FlushHomeStatus",
			Handler:    _ChoughService_FlushHomeStatus_Handler,
		},
		{
			MethodName: "SetDoorState",
			Handler:    _ChoughService_SetDoorState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chough.proto",
}
